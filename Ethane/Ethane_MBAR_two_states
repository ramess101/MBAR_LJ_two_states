"""
Predicts the internal energy for a new model (Potoff or Mess-UP) using simulation
just for the initial model (TraPPE). The TraPPE and Mess-UP models represent
an example of very good phase space overlap as they are very similar LJ models.
The Potoff model has very poor phase space overlap having a different value
of sigma and a repulsive exponent of 16. 

The primary conclusion is that for Potoff the number of effective samples is
around 1, which explains the poor prediction for MBAR. However, when using
"MBAR_alt" the prediction is better than "MBAR" and just rerunning the simulation
(i.e. a weighting of 1 for all configurations). The question is, is MBAR or
MBAR_alt the correct implementation of MBAR?

In addition, it is unclear why the prediction of U from MBAR for the Mess-UP 
model is worse than just rerunning the simulation (again, a weighting of 1 for
all configurations). This is surprising as the number of effective samples
is much larger for the Mess-UP model (around 500).
"""

import numpy as np
import matplotlib.pyplot as plt
from pymbar import MBAR
import sys

# Physical constants
N_A = 6.02214086e23 #[/mol]
nm3_to_ml = 10**21
bar_nm3_to_kJ_per_mole = 0.0602214086
R_g = 8.3144598 / 1000. #[kJ/mol/K]

# Simulation compound, Ethane
M_w = 30.07 # [gm/mol]

# Constant temperature simulation
T = 135. # [K]
beta = 1./(R_g*T)

# Constant volume simulation
L = 3.21285 #[nm]
V = L**3 #[nm3]

# These are the Mie parameters used for state 0 (TraPPE) and state 1 (Potoff) and state 2 (Mess-UP)
eps_0 = 98. #[K]
sig_0 = 0.375 #[nm]
lam_0 = 12.
eps_1 = 121.29 #[K]
sig_1 = 0.3783 #[nm]
lam_1 = 16.
eps_2 = 98.5 #[K]
sig_2 = 0.375 #[nm]
lam_2 = 12.

def U_to_u(U,pV): #Converts internal energy, pressure, volume, and temperature into reduced potential energy
    #u = beta*(U + pV)
    u = beta*U # Michael said that for NVE the Boltzmann weight is just beta*U
    return u

# Import the potential energies and pressures for the different mdruns and reruns
# The notation is: subenergy"i_j" were "i" is the state that was used with "mdrun"
# and "j" is the state that was with used "rerun"
# TraPPE is state 0, Potoff is state 1, Mess-UP is state 2

# Extract values for internal energy and pressure from gromacs output file for
# the reference state, i.e. the TraPPE model

Up_00=np.loadtxt('energy0_0.txt')
U_00 = Up_00[:,1] + Up_00[:,2] #[kJ/mol]
P_00 = Up_00[:,4] + Up_00[:,5]  #[bar]
pV_00 = V * P_00 * bar_nm3_to_kJ_per_mole #[kJ/mol]

new_state = int(raw_input("For which model would you like to predict the internal energy? 1- Potoff, 2-Mess-UP \n"))

if new_state == 1:
    
    Up_01 = np.loadtxt('energy0_1.txt')
    Up_11 = np.loadtxt('energy1_1.txt')
    
elif new_state == 2:
    
    Up_01 = np.loadtxt('energy0_2.txt')
    Up_11 = np.loadtxt('energy2_2.txt')
        
else:
    
    sys.exit('Model value must be either 1 or 2')        

# Assign variables to specific values from gromacs output
U_01 = Up_01[:,1] + Up_01[:,2]
P_01 = Up_01[:,4] + Up_01[:,5]
pV_01 = V * P_01 * bar_nm3_to_kJ_per_mole #[kJ/mol]

U_11 = Up_11[:,1] + Up_11[:,2]
P_11 = Up_11[:,4] + Up_11[:,5]
pV_11 = V * P_11 * bar_nm3_to_kJ_per_mole #[kJ/mol]

# Convert potentials and pV to reduced internal energies
u_00 = U_to_u(U_00,pV_00)
u_01 = U_to_u(U_01,pV_01)
u_11 = U_to_u(U_11,pV_11)

# Using just the Model 0 mdrun samples
N_k = np.array([len(u_00),0]) # The number of samples from the two states
u_kn = np.array([u_00,u_01])
U_kn = U_00
  
mbar = MBAR(u_kn,N_k)

(Deltaf_ij, dDeltaf_ij, Theta_ij) = mbar.getFreeEnergyDifferences(return_theta=True)

# The observable we are interested in is U, internal energy
A_kn = U_kn

(EA_k, dEA_k) = mbar.computeExpectations(A_kn)

# Perhaps I am implementing MBAR improperly. Here I have reevaluated the expectation values
# by multiplying the weight of each configuration by the expectation value of the
# given configuration using state "i" rather than state 0.

EA_k_alt = EA_k.copy()

EA_k_alt[0] = np.mean(mbar.W_nk[:,0]*U_00)*len(U_00) #Weighted average
EA_k_alt[1] = np.mean(mbar.W_nk[:,1]*U_01)*len(U_01)

U_00_ave = np.mean(U_00)
U_11_ave = np.mean(U_11)
U_01_ave = np.mean(U_01)

plt.errorbar(range(len(EA_k)),EA_k,dEA_k,label='MBAR')
plt.errorbar(range(len(EA_k)),EA_k_alt,dEA_k,label='MBAR Alt')
plt.plot([U_00_ave,U_11_ave],label='Simulated')
plt.plot([U_00_ave,U_01_ave],label='Rerun')
plt.ylabel('Internal Energy (kJ/mol)')
plt.xlabel('Model')
plt.title('Comparison of Different Methods for Predicting Internal Energy')
plt.legend()
plt.show()

plt.plot(U_00,label='Model 0')
plt.plot(U_01,label='Model '+str(new_state)+' Rerun')
plt.plot(U_11,label='Model '+str(new_state)+' Simulated')
plt.ylabel('Internal Energy')
plt.xlabel('Sample')
plt.legend()
plt.show()

plt.plot(pV_00,label='Model 0')
plt.plot(pV_01,label='Model '+str(new_state)+' Rerun')
plt.ylabel('pV Energy')
plt.xlabel('Sample')
plt.legend()
plt.show()

plt.plot(u_kn[0,:],label='Model 0')
plt.plot(u_kn[1,:],label='Model '+str(new_state)+' Rerun')
plt.ylabel('Reduced Potential Energy')
plt.xlabel('Sample')
plt.legend()
plt.show()

plt.plot(u_kn[1,:]-u_kn[0,:])
plt.ylabel(r'$\Delta$ Reduced Potential Energy')
plt.xlabel('Sample')
plt.legend()
plt.show()

plt.plot(Deltaf_ij[0,:],label='Model 0')
plt.plot(Deltaf_ij[1,:],label='Model '+str(new_state))
plt.ylabel('$\Delta$ F (kJ/mol)')
plt.xlabel('Model 0, Model 1')
plt.legend()
plt.show()

plt.plot(dEA_k)
plt.ylabel('Uncertainty Internal Energy (kJ/mol)')
plt.xlabel('Model')
plt.show()

plt.plot(mbar.W_nk[:,1],label='Model '+str(new_state))
plt.plot(mbar.W_nk[:,0],label='Model 0')
plt.xlabel('Configuration')
plt.ylabel('Weight')
plt.title('Unsampled State')
plt.legend()
plt.show()

plt.plot(mbar.W_nk[:,0]*U_00,label='Model 0')
plt.plot(mbar.W_nk[:,1]*U_01,label='Model '+str(new_state)+' Rerun')
plt.plot(mbar.W_nk[:,0]*U_11,label='Model '+str(new_state)+' Simulated')
plt.ylabel('Weighted Contribution to Internal Energy')
plt.xlabel('Sample')
plt.legend()
plt.show()

plt.hist(u_kn[0,:]-u_kn[1,:])
plt.xlabel(r'$\Delta f$ (kJ/mol)')
plt.ylabel('Samples')
plt.show()

# Testing how many effective samples we have for the new state

N_eff = 1./((mbar.W_nk[:,1]**2).sum())
print(N_eff)
